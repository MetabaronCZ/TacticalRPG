https://codepen.io/anon/pen/bQYPXO


/* HTML */
<div class="Container"></div>
<button id="js-rotate-left" class="Button" type="button">&lsaquo;</button>
<button id="js-rotate-right" class="Button" type="button">&rsaquo;</button>

/* SCSS */
$perRow: 12;
$itemSize: 50px;

* { margin: 0; padding: 0; }
*, *::before, *::after { box-sizing: border-box; }

.Container {
  width: $perRow * $itemSize;
  margin-left: 3 * $itemSize;
  font-size: 0;
  transform-style: preserve-3d;
}

.Tile {
  position: relative;
  display: inline-block;
  width: $itemSize;
  height: $itemSize;
  transform-style: preserve-3d;

  &-side {
    position: absolute;
    display: flex;
    width: 100%;
    height: 100%;
    font-family: Tahoma, Verdana, Arial, sans-serif;
    font-size: 20px;
    line-height: 1;
    background: #ddd;
    align-items: center;
    justify-content: center;
    border: 1px solid #ccc;
    
    &:hover {
      background-color: #fff;
      cursor: pointer;
    }
    
    &.Tile-side--left {
      transform: rotateY(-90deg) translate3d(-#{$itemSize/2}, 0, #{$itemSize/2});
      background: red;
    }

    &.Tile-side--right {
      transform: rotateY(-90deg) translate3d(-#{$itemSize/2}, 0, -#{$itemSize/2});
      background: blue;
    }

    &.Tile-side--front {
      transform: rotateX(-90deg) translate3d(0, #{$itemSize/2}, #{$itemSize/2});
      background: green;
    }

    &.Tile-side--back {
      transform: rotateX(-90deg) translate3d(0, #{$itemSize/2}, -#{$itemSize/2});
      background: orange;
    }

    &.Tile-side--bottom {
      transform: translate3d(0, 0, -#{$itemSize});
      background: orange;
    }
  }
}

.Button {
  padding: 10px 20px;
  font-size: 20px;
  font-weight: bold;
  border: 1px solid #fff;
  background: #e0e0e0;
  cursor: pointer;
  
  &:hover {
    background: #fff;
    border-color: #e0e0e0;
  }
}

/* TS */
const cont = document.querySelector('.Container');
const perRow = 12;
const count = perRow * perRow;
const rot = -45;

// generate grid
for (let i = 0; i < count; i++) {
  const item = document.createElement('div');
  const height = Math.floor(5 * Math.random());
  item.className = 'Tile';
  item.style.transform = `translate3d(0, 0, ${10*height}px)`;

  const sideTop = document.createElement('div');
  sideTop.className = 'Tile-side Tile-side--top';
  sideTop.textContent = height;
  
  const sideLeft = document.createElement('div');
  sideLeft.className = 'Tile-side Tile-side--left';

  const sideRight = document.createElement('div');
  sideRight.className = 'Tile-side Tile-side--right';

  const sideFront = document.createElement('div');
  sideFront.className = 'Tile-side Tile-side--front';

  const sideBack = document.createElement('div');
  sideBack.className = 'Tile-side Tile-side--back';

  const sideBottom = document.createElement('div');
  sideBottom.className = 'Tile-side Tile-side--bottom';

  item.appendChild(sideTop);
  item.appendChild(sideLeft);
  item.appendChild(sideRight);
  item.appendChild(sideFront);
  item.appendChild(sideBack);
  item.appendChild(sideBottom);

  cont.appendChild(item);
}

// events
const btnLeft = document.querySelector('#js-rotate-left');
const btnRight = document.querySelector('#js-rotate-right');
let isRotating = false;

btnLeft.addEventListener('click', e => {
  e.preventDefault();
  
  if (isRotating) {
    return;
  }
  isRotating = true;

  requestAnimationFrame(() => {
    rotate(-1);
    isRotating = false;
  })
});

btnRight.addEventListener('click', e => {
  e.preventDefault();
  
  if (isRotating) {
    return;
  }
  isRotating = true;

  requestAnimationFrame(() => {
    rotate(+1);
    isRotating = false;
  })
});

const rotate = (spd: number) => {
  rot += 10*spd;
  cont.style.transform = `perspective(10000000px) rotateX(66deg) rotateZ(${rot}deg)`;
};

// init
rotate(0);
